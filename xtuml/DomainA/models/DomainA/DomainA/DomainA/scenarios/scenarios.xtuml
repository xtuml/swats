-- BP 7.1.6 content: Package syschar: 3 persistence-version: 7.1.6

INSERT INTO EP_PKG
	VALUES ("70450a9e-eb35-4ceb-93b8-3cdc7c0c0f8f",
	"00000000-0000-0000-0000-000000000000",
	"64118ad4-4d5f-4328-9fb8-ae68cb350188",
	'scenarios',
	'',
	0);
INSERT INTO GD_MD
	VALUES ("95aab916-859a-4331-9b79-a894500da1cd",
	112,
	"70450a9e-eb35-4ceb-93b8-3cdc7c0c0f8f",
	108,
	0,
	0,
	1,
	1,
	1,
	12,
	1,
	0,
	0,
	0,
	0,
	0,
	'',
	'DomainA::DomainA::DomainA::scenarios');
INSERT INTO DIM_DIA
	VALUES ("95aab916-859a-4331-9b79-a894500da1cd",
	'',
	1.000000,
	0.000000,
	0.000000,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO S_SYNC
	VALUES ("3b7b6523-37d4-4992-9199-76a66cc724b5",
	"00000000-0000-0000-0000-000000000000",
	'Domain_A_setup',
	' Domain A setup
',
	'

my_test = create Test_Data with td_id = 1 & \
                                This_Test_Number = 1

#Create several instances of Object_A
count = 5
loop

   newA = create Object_A with idA = count &\
                               ResultA = 0 &\
                               Current_State  = ''Idle''
   count = count - 1
   breakif count = 0
endloop

Super1 = create Domain_A_Object_Super with idSUPER = 1
Sub_A1 = create Domain_A_Object_SubA with SubA_Attribute = 1 & A_Text = "Sub A1"
#Sub_B1 = create Domain_A_Object_SubB with SubB_Attribute = 1 & B_Text = "Sub B1"

link Super1 R4 Sub_A1

Super2 = create Domain_A_Object_Super with idSUPER = 2
#Sub_A2 = create Domain_A_Object_SubA with SubA_Attribute = 2 & A_Text = "Sub A2"
Sub_B2 = create Domain_A_Object_SubB with SubB_Attribute = 2 & B_Text = "Sub B2"

link Super2 R4 Sub_B2',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	2,
	1);
INSERT INTO PE_PE
	VALUES ("3b7b6523-37d4-4992-9199-76a66cc724b5",
	1,
	"70450a9e-eb35-4ceb-93b8-3cdc7c0c0f8f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("78b8df88-b431-48a9-8912-9e354fa7d2f7",
	"00000000-0000-0000-0000-000000000000",
	'Sync_to_event',
	' Sync to event
',
	'#-------------------------------------------------------------------
# Sync service invocation to an event
#-------------------------------------------------------------------

   my_test = find-one Test_Data
   Test    = my_test.This_Test_Number

   has_failed = FALSE

   # Initiate the test
   an_instanceA = find-one Object_A where idA = 2

   if an_instanceA != UNDEFINED then
      generate objA6:StartB(Test) to an_instanceA
   else
      # Null instance detected.
      [] = RPT5:Test_Text[Test, "DomainA setup scenario not run"]
   endif

   Test = Test + 1

   inputA = 1
   inputB = 2

#-------------------------------------------------------------------
# Test 1
#-------------------------------------------------------------------

   [] = RPT1:Start_Test[Test,"1241-0000-01-1110", "DomainA", "Domain A to B", "synch 4 service call"]
   [] = RPT8:Specify_Requid[Test, "1241-0000-01-1103"]

   [outputA, outputB] = termA4:Sync4A[inputA, inputB, Test]

   if outputA = 3 and outputB = 4 then
      [] = RPT2:Test_Passed["DomainA", Test, outputB]
   else
      [] = RPT3:Test_Failed["DomainA", Test, outputA]
   endif

   Test = Test + 1

# End Test 1

#-------------------------------------------------------------------

   my_test.This_Test_Number = Test

',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'',
	2,
	3);
INSERT INTO PE_PE
	VALUES ("78b8df88-b431-48a9-8912-9e354fa7d2f7",
	1,
	"70450a9e-eb35-4ceb-93b8-3cdc7c0c0f8f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("81d5e907-098f-44a1-b41d-77ab700cb24a",
	"00000000-0000-0000-0000-000000000000",
	'Sync_to_sync',
	' Sync to sync
',
	'#-------------------------------------------------------------------
#Sync service invocation to sync service
#-------------------------------------------------------------------

   my_test = find-one Test_Data

   # Initiate the test
   Test = my_test.This_Test_Number

   has_failed = FALSE

   inputA = 3
   inputB = 4

#-------------------------------------------------------------------
# Test 1
#-------------------------------------------------------------------

   [] = RPT1:Start_Test[Test,"1241-0000-01-1110", "DomainA", "Domain A to B", "synch 3 service call"]
   [] = RPT8:Specify_Requid[Test, "1241-0000-01-1101"]
   [] = RPT8:Specify_Requid[Test, "1241-0000-01-1104"]
   [] = RPT8:Specify_Requid[Test, "1241-0000-01-1105"]
   [] = RPT8:Specify_Requid[Test, "1241-0000-01-0810"]
   [] = RPT8:Specify_Requid[Test, "1241-0000-01-1103"]

   [outputA, outputB] = termA3:Sync3A[inputA, inputB, Test]

   if outputA = 5 and outputB = 6 then
      [] = RPT2:Test_Passed["DomainA", Test, outputB]
   else
      [] = RPT3:Test_Failed["DomainA", Test, outputA]
   endif

   Test = Test + 1

# End Test 1

#-------------------------------------------------------------------
# Test 2
#-------------------------------------------------------------------

   [] = RPT1:Start_Test[Test,"1241-0000-01-1110", "DomainA", "Domain A to B", "synch 2 service call"]
   [] = RPT8:Specify_Requid[Test, "1241-0000-01-1101"]
   [] = RPT8:Specify_Requid[Test, "1241-0000-01-1104"]
   [] = RPT8:Specify_Requid[Test, "1241-0000-01-1105"]
   [] = RPT8:Specify_Requid[Test, "1241-0000-01-0810"]
   [] = RPT8:Specify_Requid[Test, "1241-0000-01-1103"]

   [outputA, outputB] = termA2:Sync2A[inputA, inputB, Test]

   if outputA = 5 and outputB = 6 then
      [] = RPT2:Test_Passed["DomainA", Test, outputB]
   else
      [] = RPT3:Test_Failed["DomainA", Test, outputA]
   endif

   Test = Test + 1

# End Test 2

#-------------------------------------------------------------------
# Test 3
#-------------------------------------------------------------------

   [] = RPT1:Start_Test[Test,"1241-0000-01-1110", "DomainA", "Domain A to B", "synch 1 service call"]
   [] = RPT8:Specify_Requid[Test, "1241-0000-01-1104"]
   [] = RPT8:Specify_Requid[Test, "1241-0000-01-1104"]
   [] = RPT8:Specify_Requid[Test, "1241-0000-01-1105"]
   [] = RPT8:Specify_Requid[Test, "1241-0000-01-0810"]
   [] = RPT8:Specify_Requid[Test, "1241-0000-01-1103"]

   inputA = 1
   inputB = 2

   [outputA, outputB] = termA1:Sync1A[inputA, inputB, Test]

   if outputA = 3 and outputB = 4 then
      [] = RPT2:Test_Passed["DomainA", Test, outputB]
   else
      [] = RPT3:Test_Failed["DomainA", Test, outputA]
   endif

   Test = Test + 1

# End Test 3

#-------------------------------------------------------------------
# Test 4
#-------------------------------------------------------------------

   an_instanceA = find-one Object_A where idA = 1
 
   if an_instanceA != UNDEFINED then
      generate objA3:StartA(Test) to an_instanceA
   else
      # Null instance detected.
      [] = RPT5:Test_Text[Test, "Can not find object A domainA scenario2"]
      [] = RPT4:Test_Unsupported[Test]
   endif

   Test = Test + 1

# End Test 4

#-------------------------------------------------------------------

   my_test.This_Test_Number = Test
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'',
	2,
	2);
INSERT INTO PE_PE
	VALUES ("81d5e907-098f-44a1-b41d-77ab700cb24a",
	1,
	"70450a9e-eb35-4ceb-93b8-3cdc7c0c0f8f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("6fbe1526-f158-4f74-930c-f680840b1469",
	"00000000-0000-0000-0000-000000000000",
	'single_bridge_test',
	' single bridge test
',
	'#------------------------------------------------------------------------#
# Call bridge service that will perform navigation in domain B
#------------------------------------------------------------------------#

my_test = find-one Test_Data
Test    = my_test.This_Test_Number

[] = NAV1:Single_Bridge_Navigate[Test]

Test = Test + 1

my_test.This_Test_Number = Test
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'',
	2,
	4);
INSERT INTO PE_PE
	VALUES ("6fbe1526-f158-4f74-930c-f680840b1469",
	1,
	"70450a9e-eb35-4ceb-93b8-3cdc7c0c0f8f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("455547c6-1c87-418b-93b1-a444fe17f44d",
	"00000000-0000-0000-0000-000000000000",
	'shared_bridge_test',
	' shared bridge test
',
	'#------------------------------------------------------------------------#
# Call shared bridge to perform navigation in domain B.
#------------------------------------------------------------------------#

my_test = find-one Test_Data
Test    = my_test.This_Test_Number

[] = NAV2:Shared_Bridge_Navigate[Test]

Test = Test + 1

my_test.This_Test_Number = Test
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'',
	2,
	5);
INSERT INTO PE_PE
	VALUES ("455547c6-1c87-418b-93b1-a444fe17f44d",
	1,
	"70450a9e-eb35-4ceb-93b8-3cdc7c0c0f8f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("afb80ef8-1c44-4dd8-8b18-8240abc85e83",
	"00000000-0000-0000-0000-000000000000",
	'one_to_one_navigation',
	' one_to_one_navigation
',
	'my_test = find-one Test_Data
Test    = my_test.This_Test_Number

#------------------------------------------------------------------------#
# Create five instances of left and right parts of the one to one relationship.
#------------------------------------------------------------------------#

   Termination_Condition = Test + 5

   loop_counter = Test

   loop
      left  = create One_To_One_Left_Side with otols_id  = loop_counter
      right = create One_To_One_Right_Side with otors_id = loop_counter

      link left R1 right

      loop_counter = loop_counter + 1

      breakif loop_counter = Termination_Condition

   endloop

   # Call bridge service to see if we can navigate from one side to the other

   loop 
      [] = NAV3:One_to_One_Navigate[Test]
      Test = Test + 1
      breakif Test = Termination_Condition
   endloop

#------------------------------------------------------------------------#

my_test.This_Test_Number = Test

',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'',
	2,
	6);
INSERT INTO PE_PE
	VALUES ("afb80ef8-1c44-4dd8-8b18-8240abc85e83",
	1,
	"70450a9e-eb35-4ceb-93b8-3cdc7c0c0f8f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("3c1f8222-2a62-4628-b061-1d1a5a90c67b",
	"00000000-0000-0000-0000-000000000000",
	'one_to_many_navigation',
	' one_to_many_navigation
',
	'my_test = find-one Test_Data

#------------------------------------------------------------------------#
# Create five instances of left part of the one to many relationship.
#------------------------------------------------------------------------#

   number_of_instances = 5

   Test = my_test.This_Test_Number

   loop_counter = Test

   terminate_condition = number_of_instances + Test + 1

   loop
      left  = create One_To_Many_Left_Side with otmls_id = loop_counter

      inner_loop_counter = loop_counter
      break_condition    = loop_counter + 3

      # Make three instances of the right side of the naviagtion to link to
      # a single instance of the left
      loop
         right = create One_To_Many_Right_Side with otmrs_id = inner_loop_counter

         link left R2 right

         inner_loop_counter = inner_loop_counter + 1

         breakif inner_loop_counter = break_condition
 
      endloop

      loop_counter = loop_counter + 1

      breakif loop_counter = terminate_condition

   endloop

   # Call bridge service to see if we can navigate from one side to the other
   loop 
      [] = NAV4:One_to_Many_Navigate[Test]
      Test = Test + 1
      breakif Test = terminate_condition
   endloop

#------------------------------------------------------------------------#

my_test.This_Test_Number = Test
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'',
	2,
	7);
INSERT INTO PE_PE
	VALUES ("3c1f8222-2a62-4628-b061-1d1a5a90c67b",
	1,
	"70450a9e-eb35-4ceb-93b8-3cdc7c0c0f8f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("a3e7e9d3-f470-41cc-be0d-ea932f549094",
	"00000000-0000-0000-0000-000000000000",
	'many_to_many_navigation',
	' many_to_many_navigation
',
	'my_test = find-one Test_Data
Test    = my_test.This_Test_Number

#------------------------------------------------------------------------#
# Create five instances of left and right parts of the many to many relationship.
#------------------------------------------------------------------------#

   number_of_tests = 5
   loop_counter    = Test

   terminate_condition = number_of_tests + Test + 1

   loop
      left  = create Many_To_Many_Left_Side with mtmls_id = loop_counter

      inner_loop_counter = loop_counter
      break_condition    = loop_counter + 3

      # Make three instances of the right side of the navigation to link to
      # a single instance of the left

      loop
         right = create Many_To_Many_Right_Side with mtmrs_id   = loop_counter
         assoc = create Many_To_Many_Associative with mtma_data = loop_counter
 
         link left R3 right using assoc

         inner_loop_counter = inner_loop_counter + 1

         breakif inner_loop_counter = break_condition

      endloop

      loop_counter = loop_counter + 1

      breakif loop_counter = terminate_condition

   endloop

   # Call bridge service to see if we can navigate from one side to the other

   loop 
      [] = NAV5:Many_to_Many_Navigate[Test]
      Test = Test + 1
      breakif Test = terminate_condition
   endloop

#------------------------------------------------------------------------#

my_test.This_Test_Number = Test',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'',
	2,
	8);
INSERT INTO PE_PE
	VALUES ("a3e7e9d3-f470-41cc-be0d-ea932f549094",
	1,
	"70450a9e-eb35-4ceb-93b8-3cdc7c0c0f8f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("4142cbdb-5977-4dbe-823e-c37d20fc940d",
	"00000000-0000-0000-0000-000000000000",
	'invoke_misc_calls',
	' invoke misc calls
',
	'
my_test = find-one Test_Data
Test    = my_test.This_Test_Number

#------------------------------------------------------------------------#

   [] = NAV6:Misc_Calls[Test]

   Test        = Test + 1
   local_fail  = FALSE
   local_value = 0

   my_test.This_Test_Number = Test

   [] = RPT1:Start_Test[Test, "Null Requid", "DomainA", "Misc calls", "Common objects"]

   # Domain B should have executed seven tests by now, so the next test shown in the TEST_DATA
   # object should be 8, that is is this is an ISIM environment. However, if this is WACA then
   # domain B will only have executed four tests so far.

   [local_fail, local_value] = termA5:Common_Named_Object_Usage [Test]

   if local_fail = TRUE then
      [] = RPT3:Test_Failed["DomainA", Test, local_value]
   else
      [] = RPT2:Test_Passed["DomainA", Test, local_value]
   endif

#------------------------------------------------------------------------#

Test = Test + 1
my_test.This_Test_Number = Test

',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'',
	2,
	9);
INSERT INTO PE_PE
	VALUES ("4142cbdb-5977-4dbe-823e-c37d20fc940d",
	1,
	"70450a9e-eb35-4ceb-93b8-3cdc7c0c0f8f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("4230debd-f393-42d3-bfb5-a455233b13e4",
	"00000000-0000-0000-0000-000000000000",
	'Start_DomainA_Tests',
	' Start DomainA Tests
',
	'[] = DomainA1::Create_Report_Object[]
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'',
	2,
	10);
INSERT INTO PE_PE
	VALUES ("4230debd-f393-42d3-bfb5-a455233b13e4",
	1,
	"70450a9e-eb35-4ceb-93b8-3cdc7c0c0f8f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("117c939b-6f97-4a90-97fa-250dc6f3b8b8",
	"00000000-0000-0000-0000-000000000000",
	'Finish_DomainA_Tests',
	' Finish DomainA Tests
',
	'
[] = DomainA2::Delete_Report_Object[]',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'',
	2,
	11);
INSERT INTO PE_PE
	VALUES ("117c939b-6f97-4a90-97fa-250dc6f3b8b8",
	1,
	"70450a9e-eb35-4ceb-93b8-3cdc7c0c0f8f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("67aedf2a-7382-49ab-9759-5b374fcac528",
	"00000000-0000-0000-0000-000000000000",
	'Enumeration_Across_Bridge_Check',
	' Enumeration Across Bridge Check
',
	'#------------------------------------------------------------------------#
# Pass an enumerated type through a bridge to see if it gets correctly
# picked up
#------------------------------------------------------------------------#

   my_test = find-one Test_Data
   Test    = my_test.This_Test_Number

   [] = NAV7:Enum_Test[Test, ''Sly'']

   Test = Test + 1
   my_test.This_Test_Number = Test
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'',
	2,
	12);
INSERT INTO PE_PE
	VALUES ("67aedf2a-7382-49ab-9759-5b374fcac528",
	1,
	"70450a9e-eb35-4ceb-93b8-3cdc7c0c0f8f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("04fe6fdb-23e6-49c4-bf48-af98d17731e1",
	"00000000-0000-0000-0000-000000000000",
	'Enumeration_Across_Lots_Of_Bridges',
	' Enumeration_Across_Lots_Of_Bridges
',
	'# Call bridge service that will perform navigation in domain B

my_test = find-one Test_Data

Test = my_test.This_Test_Number

[] = NAV8:Big_Bridge_Navigation[Test, ''Sandy'']

Test = Test + 1

my_test.This_Test_Number = Test
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'',
	2,
	13);
INSERT INTO PE_PE
	VALUES ("04fe6fdb-23e6-49c4-bf48-af98d17731e1",
	1,
	"70450a9e-eb35-4ceb-93b8-3cdc7c0c0f8f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("3e28e1cd-75b2-4e6e-a5f7-97f80557922b",
	"00000000-0000-0000-0000-000000000000",
	'Passing_IH',
	' Passing IH
',
	'#------------------------------------------------------------------------#
# Pass an instance handle through a bridge to see if it gets correctly
# picked up
#------------------------------------------------------------------------#

   my_test = find-one Test_Data
   Test    = my_test.This_Test_Number

   IH_To_Be_Passed = create Object_A with idA           = 100 &\
                                          ResultA       = 100 &\ 
                                          Current_State = ''Sync_service_invocation_to_event'' 

   [] = NAV9:Pass_IH[Test, IH_To_Be_Passed]

#------------------------------------------------------------------------#

   Test = Test + 1
   my_test.This_Test_Number = Test',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'',
	2,
	14);
INSERT INTO PE_PE
	VALUES ("3e28e1cd-75b2-4e6e-a5f7-97f80557922b",
	1,
	"70450a9e-eb35-4ceb-93b8-3cdc7c0c0f8f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("94db82b8-0334-4c0e-ae4e-3ae69ccdb397",
	"00000000-0000-0000-0000-000000000000",
	'Pass_Params',
	' Pass_Params
',
	'   my_test = find-one Test_Data
   Test    = my_test.This_Test_Number

   [] = RPT1:Start_Test[Test, "1241-0000-01-1106", "DomainA", "Misc calls", "Param Passed through bridge"]

   Local_Int = 999
   Local_Real = 99.9
   Local_Text = "Passed From Domain A"
   Local_Bool = TRUE

   [The_Result] = DomainA4::Check_Service_Params[Local_Int, Local_Real, Local_Text, Local_Bool]

   if The_Result = 10 then
      [] = RPT2:Test_Passed["Param Passed through bridge", Test, The_Result]
   else
      [] = RPT3:Test_Failed["Param Passed through bridge", Test, The_Result]
   endif

#------------------------------------------------------------------------#

   Test = Test + 1
   my_test.This_Test_Number = Test',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'',
	2,
	15);
INSERT INTO PE_PE
	VALUES ("94db82b8-0334-4c0e-ae4e-3ae69ccdb397",
	1,
	"70450a9e-eb35-4ceb-93b8-3cdc7c0c0f8f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO PE_PE
	VALUES ("70450a9e-eb35-4ceb-93b8-3cdc7c0c0f8f",
	1,
	"00000000-0000-0000-0000-000000000000",
	"599aa586-d56e-4473-a511-fb537046fddc",
	7);
INSERT INTO C_C_PROXY
	VALUES ("599aa586-d56e-4473-a511-fb537046fddc",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	'DomainA',
	' For use in multiple domain builds
',
	0,
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'DomainA',
	'../DomainA.xtuml');
INSERT INTO S_SYS_PROXY
	VALUES ("64118ad4-4d5f-4328-9fb8-ae68cb350188",
	'DomainA',
	1,
	'../../../DomainA.xtuml');
