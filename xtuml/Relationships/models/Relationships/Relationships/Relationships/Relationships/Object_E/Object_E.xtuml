-- BP 7.1.6 content: ModelClass syschar: 3 persistence-version: 7.1.6

INSERT INTO O_OBJ
	VALUES ("54095725-f60a-433c-b6ed-6dd76e5ec8fa",
	'Object_E',
	7,
	'objE',
	' This object forms part of a 1-(Mc:Mc) relationships.
 
 All tests for the above relationship are controlled by this object.
',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_TFR
	VALUES ("f176926f-014f-4bcd-9457-29b308a17b1c",
	"54095725-f60a-433c-b6ed-6dd76e5ec8fa",
	'Create_Relationships',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	0,
	'#-------------------------------------------------------------------#
#
# Create relationships
#
# The architecture shall provide a mechainsm to allow creation of a 
# simple relationship link between two object instances 
# 1241-0000-01-0603
#
# The architecture shall provide a mechanism to allow creation of a 
# associative relationship link between two object instances and an 
# associative instance
# 1241-0000-01-0611
#
# The architectureshall support a translation of the ASL link 
# statement to map to the mechanism that allows creation of a 
# relationship link between two object instances
# 1241-0000-01-1202
#
#-------------------------------------------------------------------#

[] = RPT1:Start_Test[Test, "1241-0000-01-0603", "Relationships", "objE", "Find instances ObjE F and EF"]
[] = RPT8:Specify_Requid[Test,"1241-0000-01-0611"]
[] = RPT8:Specify_Requid[Test,"1241-0000-01-1202"]
[] = RPT8:Specify_Requid [Test, "1103-0000-01-0612"]

# Find the desired instances for Object_E
firstE  = find-one Object_E where idE = 1
thirdE  = find-one Object_E where idE = 3
fifthE  = find-one Object_E where idE = 5

# Find the desired instances for Object_F
firstF  = find-one Object_F where idF = 1
fourthF = find-one Object_F where idF = 4

# Find the desired instances for Object_EF
firstEF  = find-one Object_EF where idEF = 1
secondEF = find-one Object_EF where idEF = 2
thirdEF  = find-one Object_EF where idEF = 3
fourthEF = find-one Object_EF where idEF = 4

# Create Mc:Mc relationships
link firstE R5 firstF  using fourthEF
link firstE R5 fourthF using thirdEF
link thirdE R5 fourthF using secondEF
link fifthE R5 fourthF using firstEF

#-------------------------------------------------------------------#
# Test that the creation and linking has been successfull
#-------------------------------------------------------------------#

{SetF}  = firstE -> R5.Object_F
{SetEF} = firstE -> R5.Object_EF

if countof {SetF} != 0 then

   if countof {SetEF} != 0 then
      [] = RPT2:Test_Passed["ObjE", Test, 0]
   else
      [] = RPT3:Test_Failed["ObjE", Test, -2]
   endif

else
   [] = RPT3:Test_Failed["ObjE", Test, -1]
endif

#-------------------------------------------------------------------#
',
	3,
	'',
	"00000000-0000-0000-0000-000000000000",
	2,
	1);
INSERT INTO O_TPARM
	VALUES ("cf420b1c-9155-49fc-b999-14294d2f7d7f",
	"f176926f-014f-4bcd-9457-29b308a17b1c",
	'Test',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("8a8d324b-0511-4234-8fcc-e71d3ae93c45",
	"54095725-f60a-433c-b6ed-6dd76e5ec8fa",
	'ObjE_Navigation',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	0,
	'#-------------------------------------------------------------------#
#
# Normal navigation
#
# The architecture shall implement simple 1:M relationships
# 1241-0000-01-0602
#
# The architecture shall implement associative 1-M:M relationships
# 1241-0000-01-0610
#
# The architecture shall provide a mechanism to allow the creation of
# associative relationship link between two object instances and an
# associative instance
# 1241-0000-01-0611
#
# The architecture shall provide a mechanism to allow the deletion of
# an associative link between an associative object and the link 
# between two objects
# 1241-0000-01-0612
#
# The architecture shall provide a mechanism to allow the deletion of
# a link between two objects in an associative relationship
# 1241-0000-01-0613
#
# The architecture shall provide operations which, given a starting 
# instance handle and a relationshipspecification, return a single 
# handle of the related instance
# 1241-0000-01-0701
#
# The architecture shall provide operations which, given a starting 
# instance handle and a relationship specification , return a set of
# handles of the related instances
# 1241-0000-01-0702
#
# The architecture shall provide operations which, given a starting 
# instance handle and a relationship specification, return a set of 
# handles of the related instances
# 1241-0000-01-0703 **** NOT SUPPORTED BY WACA ****
#
# The architecture shall support chains of navigations expressed in 
# ASL
# 1241-0000-01-0704
#
# The architecture shall support navigations to associative objects
# expressed in ASL
# 1241-0000-01-0706
#
# The architecture shall support navigations from singly associative
# objects expressed in ASL
# 1241-0000-01-0707
#
# The architecture shall support a translation of the ASL link 
# statment to map to the mechanism that allows creation of a 
# relationship link between two object instances
# 1241-0000-01-1202
#
# The architecture shall support a translation of the ASL unassociate
# statment to map to the mechanism that allows the deletion of an 
# associative link between an associative object and the link between
# two objects
# 1241-0000-01-1203
#
# The architecture shall support a translation of the ASL unlink
# statement to map to the mechanism that allow the deletion of a 
# link between two objects in a relationship
# 1241-0000-01-1204
#
# The architecture shall support a translation of the ASL navigate
# statment to map to the mechanism that allows the traversal of
# relationship links
# 1241-0000-01-1205
#
#-------------------------------------------------------------------#

# Initialise the variables
Has_Failed       = FALSE
Unsupported      = FALSE
Failure_Code     = -1

#-------------------------------------------------------------------#

# Find the desired instances for Object_E
firstE  = find-one Object_E where idE = 1
thirdE  = find-one Object_E where idE = 3
fourthE = find-one Object_E where idE = 4
fifthE  = find-one Object_E where idE = 5

#Find the desired instances for Object_F
firstF  = find-one Object_F where idF = 1
fourthF = find-one Object_F where idF = 4
fifthF  = find-one Object_F where idF = 5

#Find the desired instances for Object_EF
firstEF  = find-one Object_EF where idEF = 1
secondEF = find-one Object_EF where idEF = 2
thirdEF  = find-one Object_EF where idEF = 3
fourtEF  = find-one Object_EF where idEF = 4
fifthEF  = find-one Object_EF where idEF = 5

#-------------------------------------------------------------------#
# Test 1 - Navigate from first instance of Object E to Object F
#          using qualified number
#-------------------------------------------------------------------#

   if Iteration = 1 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-0702", "Relationships", "objE", "Navigate from ObjE to ObjF"]
      [] = RPT8:Specify_Requid[Test,"1241-0000-01-0610"]
      [] = RPT8:Specify_Requid[Test,"1241-0000-01-1205"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0631"]

      # Perform the navigation
      {SetF} = firstE -> R5.Object_F

      # Check the result of the navigation
      if countof {SetF} != 2 then
         Has_Failed   = TRUE
         Failure_Code = -10
      else
         # Check the set contents
         Val1 = -11
         Val2 = -12

         for InstF in {SetF} do

            if InstF.idF = 1 then
               Val1 = InstF.idF
            endif

            if InstF.idF = 4 then
               Val2 = InstF.idF
            endif

         endfor

         if Val1 = 1 then
            if Val2 = 4 then
               Has_Failed = FALSE
            else
               Has_Failed   = TRUE
               Failure_Code = Val2
            endif
         else
            Has_Failed   = TRUE
            Failure_Code = Val1
         endif

      endif

   endif

# End Test 1

#-------------------------------------------------------------------#
# Test 2 - Navigate from Object F back to Object E
#-------------------------------------------------------------------#

   if Iteration = 2 then

      [] = RPT1:Start_Test[Test,"1241-0000-01-0702" , "Relationships", "objE", "Object F to Object E"]
      [] = RPT8:Specify_Requid[Test,"1241-0000-01-0610"]
      [] = RPT8:Specify_Requid[Test,"1241-0000-01-1205"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0631"]

      {SetE} = fourthF -> R5.Object_E

      if countof {SetE} = 0 then
         Has_Failed   = TRUE
         Failure_Code = -30
      else
         
         Val1 = -10
         Val2 = -20
         Val3 = -30

         for InstE in {SetE} do

            if InstE.idE = 1 then
               Val1 = InstE.idE
            endif

            if InstE.idE = 3 then
               Val2 = InstE.idE
            endif

            if InstE.idE = 5 then
               Val3 = InstE.idE
            endif

         endfor

         if Val1 = 1 then
            if Val2 = 3 then
               if Val3 = 5 then
                  Has_Failed = FALSE
               else
                  Has_Failed   = TRUE
                  Failure_Code = Val3
               endif
            else
               Has_Failed   = TRUE
               Failure_Code = Val2
            endif
         else
            Has_Failed   = TRUE
            Failure_Code = Val1
         endif

      endif

   endif

# End Test 2


#-------------------------------------------------------------------#
# Test 3 - Navigate from third instance of Object E to Object F
#-------------------------------------------------------------------#

   if Iteration = 3 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-0702", "Relationships", "objE", "Navigate from ObjE to ObjF"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0610"]
      [] = RPT8:Specify_Requid[Test,"1241-0000-01-1205"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0631"]

      # Perform the navigation
      {SetF} = thirdE -> R5.Object_F

      # Check the result of the navigation
      if countof {SetF} != 1 then
         Has_Failed   = TRUE
         Failure_Code = -10
      else
         # Check the set contents
         Val1 = -20

         for InstF in {SetF} do

            if InstF.idF != 4 then
               Failure_Code = Val1
               Has_Failed   = TRUE
            endif

         endfor

      endif

   endif

# End Test 3

#-------------------------------------------------------------------#
# Test 4 - Navigate from a set of instance handles
#-------------------------------------------------------------------#

   if Iteration = 4 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-0703", "Relationships", "objE", "Navigate from set F to E"]

      Val1 = 0
      Val2 = 0
      Val3 = 0
      Val4 = 0

      {SetF} = firstE -> R5.Object_F

      if countof {SetF} = 2 then
         {SetE} = {SetF} -> R5.Object_E

         if countof {SetE} = 4 then
         
            for InstE in {SetE} do

               if Val1 = 0 then
                  Val1 = InstE.idE
               else
                  if Val2 = 0 then
                     Val2 = InstE.idE
                  else

                     if Val3 = 0 then
                        Val3 = InstE.idE
                     else
                        Val4 = InstE.idE
                     endif

                  endif

               endif

            endfor

            Total = 0
            Total = Val1 + Val2 + Val3 + Val4

            if Total != 10 then
               Has_Failed = TRUE
               Failure_Code = -10
            endif

         else
            Has_Failed = TRUE
            Failure_Code = -20
         endif

      else
         Has_Failed = TRUE
         Failure_Code = -30
      endif

   endif

# End Test 4

#-------------------------------------------------------------------#
# Test 5 - Navigate from a set of instance handles
#-------------------------------------------------------------------#

   if Iteration = 5 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-0703", "Relationships", "objE", "Navigate from set E to F"]

      temp = 0
      Total = 0

      {SetE} = fourthF -> R5.Object_E

      if countof {SetE} = 3 then
         {SetF} = {SetE} -> R5.Object_F

         if countof {SetF} = 4 then
         
            for InstF in {SetF} do
               temp  = InstF.idF
               Total = Total + temp
            endfor

            if  Total != 13 then
               Has_Failed = TRUE
               Failure_Code = Total
            endif

         else
            Has_Failed = TRUE
            Failure_Code = -20
         endif

      else
         Has_Failed = TRUE
         Failure_Code = -30
      endif

   endif

# End Test 5

#-------------------------------------------------------------------#
# Test 6 - Navigate from a set of instance handles
#-------------------------------------------------------------------#

   if Iteration = 6 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-0703", "Relationships", "objE", "Navigate from set F to EF"]

      Val1 = 0
      Val2 = 0
      Val3 = 0
      Val4 = 0

      {SetF} = firstE -> R5.Object_F

      if countof {SetF} = 2 then
         {SetEF} = {SetF} -> R5.Object_EF

         if countof {SetEF} = 4 then
         
            for InstEF in {SetEF} do

               if Val1 = 0 then
                  Val1 = InstEF.idEF
               else
                  if Val2 = 0 then
                     Val2 = InstEF.idEF
                  else

                     if Val3 = 0 then
                        Val3 = InstEF.idEF
                     else
                        Val4 = InstEF.idEF
                     endif

                  endif

               endif

            endfor

            Total = 0
            Total = Val1 + Val2 + Val3 + Val4

            if Total != 10 then
               Has_Failed = TRUE
               Failure_Code = -10
            endif

         else
            Has_Failed = TRUE
            Failure_Code = -20
         endif

      else
         Has_Failed = TRUE
         Failure_Code = -30
      endif

   endif

# End Test 6

#-------------------------------------------------------------------#
# Test 7 - Navigate from a set of instance handles
#-------------------------------------------------------------------#

   if Iteration = 7 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-0703", "Relationships", "objE", "Navigate from set E to EF"]

      Val1 = 0
      Val2 = 0
      Val3 = 0
      Val4 = 0

      {SetE} = fourthF -> R5.Object_E

      if countof {SetE} = 3 then
         {SetEF} = {SetE} -> R5.Object_EF

         if countof {SetEF} = 4 then
         
            for InstEF in {SetEF} do

               if Val1 = 0 then
                  Val1 = InstEF.idEF
               else
                  if Val2 = 0 then
                     Val2 = InstEF.idEF
                  else

                     if Val3 = 0 then
                        Val3 = InstEF.idEF
                     else
                        Val4 = InstEF.idEF
                     endif

                  endif

               endif

            endfor

            Total = 0
            Total = Val1 + Val2 + Val3 + Val4

            if Total != 10 then
               Has_Failed = TRUE
               Failure_Code = -10
            endif

         else
            Has_Failed = TRUE
            Failure_Code = -20
         endif

      else
         Has_Failed = TRUE
         Failure_Code = -30
      endif

   endif

# End Test 7

#-------------------------------------------------------------------#
# Test 8 - Navigate to the associative object from the fifth instance
#          of Object E
#-------------------------------------------------------------------#

   if Iteration = 8 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-0706", "Relationships", "objE", "Navigate to associative object"]
      [] = RPT8:Specify_Requid[Test,"1241-0000-01-0610"]
      [] = RPT8:Specify_Requid[Test,"1241-0000-01-1205"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0631"]

      # Perform the navigation
      {SetEF} = fifthE -> R5.Object_EF

      # Check the result of the navigation
      if countof {SetEF} != 1 then
         Has_Failed = TRUE
      else
 
         # Check the contents of the set
         for InstEF in {SetEF} do

            if InstEF.idEF != 1 then
               Failure_Code = -10
               Has_Failed   = TRUE
            endif

         endfor

      endif

   endif

# End Test 8

#-------------------------------------------------------------------#
# Test 9 - Navigate from Object F to the associated object EF
#-------------------------------------------------------------------#

   if Iteration = 9 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-0706", "Relationships", "objE", "ObjF to associated Object EF"]
      [] = RPT8:Specify_Requid[Test,"1241-0000-01-0610"]
      [] = RPT8:Specify_Requid[Test,"1241-0000-01-1205"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0631"]

      {SetEF} = fourthF -> R5.Object_EF

      if countof {SetEF} = 0 then
         Has_Failed = TRUE
         Failure_Code = -70
      else
         Val1 = -10
         Val2 = -20
         Val3 = -30

         for InstEF in {SetEF} do

            if InstEF.idEF = 1 then
               Val1 = InstEF.idEF
            endif

            if InstEF.idEF = 2 then
               Val2 = InstEF.idEF
            endif

            if InstEF.idEF = 3 then
               Val3 = InstEF.idEF
            endif

         endfor

         for InstEF in {SetEF} do

            if InstEF.idEF = 1 then
               Val1 = InstEF.idEF
            endif

            if InstEF.idEF = 2 then
               Val2 = InstEF.idEF
            endif

            if InstEF.idEF = 3 then
               Val3 = InstEF.idEF
            endif

         endfor

         if Val1 = 1 then
            if Val2 = 2 then
               if Val3 = 3 then
                  Has_Failed = FALSE
               else
                  Has_Failed   = TRUE
                  Failure_Code = Val3
               endif
            else
               Has_Failed   = TRUE
               Failure_Code = Val2
            endif
         else
            Has_Failed   = TRUE
            Failure_Code = Val1
         endif

      endif

   endif

# End Test 9

#-------------------------------------------------------------------#
# Test 10 - Navigate from the associated object EF to object F
#-------------------------------------------------------------------#

   if Iteration = 10 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-0707", "Relationships", "objE", "Associated object EF to object F"]
      [] = RPT8:Specify_Requid[Test,"1241-0000-01-0610"]
      [] = RPT8:Specify_Requid[Test,"1241-0000-01-1205"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0631"]

      {SetEF} = find-all Object_EF

      for InstEF in {SetEF} do

         if InstEF.idEF = 1 then
            InstF = InstEF -> R5.Object_F

            if InstF.idF != 4 then
               Has_Failed   = TRUE
               Failure_Code = -10
               break
            endif

         endif

         if InstEF.idEF = 2 then
            InstF = InstEF -> R5.Object_F

            if InstF.idF != 4 then
               Has_Failed   = TRUE
               Failure_Code = -20
               break
            endif

         endif

         if InstEF.idEF = 3 then
            InstF = InstEF -> R5.Object_F

            if InstF.idF != 4 then
               Has_Failed   = TRUE
               Failure_Code = -30
               break
            endif

         endif

         if InstEF.idEF = 4 then
            InstF = InstEF -> R5.Object_F
            if InstF.idF != 1 then
               Has_Failed   = TRUE
               Failure_Code = -40
               break
            endif

         endif

      endfor

   endif

# End Test 10

#-------------------------------------------------------------------#
# Test 11 - Navigate from the associated object EF to object E
#-------------------------------------------------------------------#

   if Iteration = 11 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-0707", "Relationships", "objE", "Associated Object EF to Object E"]
      [] = RPT8:Specify_Requid[Test,"1241-0000-01-0610"]
      [] = RPT8:Specify_Requid[Test,"1241-0000-01-1205"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0632"]

      InstE = thirdEF -> R5.Object_E

      if InstE = UNDEFINED then
         Has_Failed   = TRUE
         Failure_Code = -10
      else

         if InstE.idE != 1 then
            Has_Failed = TRUE
            Failure_Code = -20
         endif

      endif

   endif 

# End Test 11

#-------------------------------------------------------------------#
# Test 12  - Navigate from object E to the associated object EF and 
#           then to object F
#-------------------------------------------------------------------#

   if Iteration = 12 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-0704", "Relationships", "objE", "ObjE to assoc ObjEF to ObjF"]
      [] = RPT8:Specify_Requid[Test,"1241-0000-01-0610"]
      [] = RPT8:Specify_Requid[Test,"1241-0000-01-0706"]
      [] = RPT8:Specify_Requid[Test,"1241-0000-01-0707"]
      [] = RPT8:Specify_Requid[Test,"1241-0000-01-1205"]

      # Unsupported by WACA 301 beta
      # Will be supported for WACA 500

      {SetF} = fifthE -> R5.Object_EF -> R5.Object_F
      
      if countof{SetF} = 1 then

         for InstF in {SetF} do

            if InstF.idF != 4 then
               Has_Failed   = TRUE
               Failure_Code = -10
            endif

         endfor

      else
         Has_Failed   = TRUE
         Failure_Code = -20
      endif

   endif

# End Test 12

#-------------------------------------------------------------------#
# Test 13 - Navigate from object F to the associated object EF then  
#           to object E
#-------------------------------------------------------------------#

   if Iteration = 13 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-0704", "Relationships", "objE", "Object F to assoc object EF to object E"]
      [] = RPT8:Specify_Requid[Test,"1241-0000-01-0610"]
      [] = RPT8:Specify_Requid[Test,"1241-0000-01-0706"]
      [] = RPT8:Specify_Requid[Test,"1241-0000-01-0707"]
      [] = RPT8:Specify_Requid[Test,"1241-0000-01-1205"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0631"]

      # Will be supported for WACA 500
      {SetE} = firstF -> R5.Object_EF -> R5.Object_E

      if countof {SetE} = 1 then

         for InstE in {SetE} do

            if InstE.idE != 1 then
               Has_Failed   = TRUE
               Failure_Code = -10
            endif

         endfor
     
      else
         Has_Failed   = TRUE
         Failure_Code = -20
      endif

   endif

# End Test 13


#-------------------------------------------------------------------#
# Test 14 - Navigate a relationships where the source instance does 
#           not form any part of a relationship
#-------------------------------------------------------------------#

   if Iteration = 14 then

      [] = RPT1:Start_Test[Test, "Null Requid", "Relationships", "objE", "Source forms no part of relationship"]

      # Perform the navigation
      {SetF} = fourthE -> R5.Object_F

      # Check the result of the navigation
      if countof {SetF} != 0 then
         Has_Failed   = TRUE
         Failure_Code = -10
      endif

   endif

# End Test 14

#-------------------------------------------------------------------#
# Test 15 - Navigate a relationships where the source instance does 
#           not form any part of a relationship
#-------------------------------------------------------------------#

   if Iteration = 15 then

      [] = RPT1:Start_Test[Test, "Null Requid", "Relationships", "objE", "Source forms no part of relationship"]

      # Perform the navigation
      {SetE} = fifthF -> R5.Object_E

      # Check the result of the navigation
      if countof {SetF} != 0 then
         Has_Failed   = TRUE
         Failure_Code = -10
      endif

   endif

# End Test 15

#-------------------------------------------------------------------#
# Test 16 - Navigate to an associative object where the source 
#           instance does not form part of the relationship
#-------------------------------------------------------------------#

   if Iteration = 16 then

      [] = RPT1:Start_Test[Test, "Null Requid", "Relationships", "objE", "Source forms no part of relationship"]
     
      # Perform the navigation
      {SetEF} = fourthE -> R5.Object_EF

      # Check the result of the navigation
      if countof {SetEF} != 0 then
         Has_Failed   = TRUE
         Failure_Code = -10
      endif

   endif

# End Test 16

#-------------------------------------------------------------------#
# Test 17 - Navigate to an associative object where the source 
#           instance does not form part of the relationship
#-------------------------------------------------------------------#

   if Iteration = 17 then

      [] = RPT1:Start_Test[Test, "Null Requid", "Relationships", "objE", "Source forms no part of relationship"]

      # Perform the navigation
      {SetEF} = fifthF -> R5.Object_EF

      # Check the result of the navigation
      if countof {SetEF} != 0 then
         Has_Failed   = TRUE
         Failure_Code = -10
      endif

   endif

# End Test 17

#-------------------------------------------------------------------#
# Test 18 - Navigate to an associative object where the source 
#           instance does not form part of the relationship
#-------------------------------------------------------------------#

   if Iteration = 18 then

      [] = RPT1:Start_Test[Test, "Null Requid", "Relationships", "objE", "Source forms no part of relationship"]
      # Perform the navigation
      InstF = fifthEF -> R5.Object_F

      # Check the result of the navigation
      if InstF != UNDEFINED then
         Has_Failed   = TRUE
         Failure_Code = -10
      endif

   endif

# End Test 18

#-------------------------------------------------------------------#
# Test 19 - Navigate to an associative object where the source 
#           instance does not form part of the relationship
#-------------------------------------------------------------------#

   if Iteration = 19 then

      [] = RPT1:Start_Test[Test, "Null Requid", "Relationships", "objE", "Source forms no part of relationship"]

      # Perform the navigation
      InstE = fifthEF -> R5.Object_E

      # Check the result of the navigation
      if InstE != UNDEFINED then
         Has_Failed   = TRUE
         Failure_Code = -10
      endif

   endif

# End Test 19

#-------------------------------------------------------------------#
# Test 20 - Correlated associative navigation
#-------------------------------------------------------------------#

   if Iteration = 20 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-1205", "Relationships", "objE", "Correlated Assoc Navigation"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0632"]

      InstEF = firstE and firstF -> R5.Object_EF

      if InstEF.idEF != 4 then
         Has_Failed   = TRUE
         Failure_Code = -10
      endif

   endif

# End Test 20

#-------------------------------------------------------------------#
# Test 21 - Attempt to naviagate from Object E to Object F via 
#           unlinked relationship
#-------------------------------------------------------------------#

   if Iteration = 21 then

      [] = RPT1:Start_Test[Test, "Null Requid", "Relationships", "objE", "Nav from E to F"]

      BigE = create Object_E with idE = 10000
      BigF = create Object_F with idF = 20000

      {SetF} = BigE -> R5.Object_F

      if countof {SetF} != 0 then
         Has_Failed   = TRUE
         Failure_Code = -10
      endif

      delete BigE
      delete BigF

   endif

# End Test 21

#-------------------------------------------------------------------#
# Test 22 - This test ensures that when instances of an object are
#           linked, unlinked then relinked that the linking of the
#           new instances is correct
#-------------------------------------------------------------------#

   if Iteration = 22 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-0603", "Relationships", "objE", "Check that no in assoc inst is correct"]
      [] = RPT8:Specify_Requid[Test,"1241-0000-01-0604"]
      [] = RPT8:Specify_Requid[Test,"1241-0000-01-0610"]
      [] = RPT8:Specify_Requid[Test,"1241-0000-01-0612"]
      [] = RPT8:Specify_Requid[Test,"1241-0000-01-0613"]
      [] = RPT8:Specify_Requid[Test,"1241-0000-01-0702"]
      [] = RPT8:Specify_Requid[Test,"1241-0000-01-1202"]
      [] = RPT8:Specify_Requid[Test,"1241-0000-01-1203"]
      [] = RPT8:Specify_Requid[Test,"1241-0000-01-1204"]
      [] = RPT8:Specify_Requid[Test,"1241-0000-01-1205"]

      firstNewE   = create Object_E  with idE = 10
      secondNewE  = create Object_E  with idE = 11
      firstNewF   = create Object_F  with idF = 20
      secondNewF  = create Object_F  with idF = 21
      firstNewEF  = create Object_EF with idE = 30 & \
                                          idF = firstNewF.idF
      secondNewEF = create Object_EF with idE = 31 & \
                                          idF = secondNewF.idF

      link firstNewE  R5 firstNewF  using firstNewEF
      link secondNewE R5 secondNewF using secondNewEF

      {SetEF} = firstNewE -> R5.Object_EF

      if countof {SetEF} != 1 then
         Has_Failed   = TRUE
         Failure_Code = -10
      endif

      unassociate firstNewE  R5 firstNewF  from firstNewEF
      unassociate secondNewE R5 secondNewF from secondNewEF

      unlink firstNewE  R5 firstNewF
      unlink secondNewE R5 secondNewF

      if not Has_Failed then

         link firstNewE  R5 firstNewF  using firstNewEF
         link secondNewE R5 secondNewF using secondNewEF

         {newSetEF} = firstNewE -> R5.Object_EF

         if countof {newSetEF} != 1 then
            Has_Failed   = TRUE
            Failure_Code = -20
         endif

      endif

      unassociate firstNewE  R5 firstNewF  from firstNewEF
      unassociate secondNewE R5 secondNewF from secondNewEF

      unlink firstNewE  R5 firstNewF
      unlink secondNewE R5 secondNewF

      delete firstNewE 
      delete secondNewE
      delete firstNewF
      delete secondNewF
      delete firstNewEF
      delete secondNewEF

   endif

# End Test 22

#-------------------------------------------------------------------#
# Tests complete
#-------------------------------------------------------------------#

if Unsupported = FALSE then 

   if Has_Failed = FALSE then
      [] = RPT2:Test_Passed["objE" , Test, 0]
   else
      [] = RPT3:Test_Failed["objE", Test, Failure_Code]
   endif

else
   [] = RPT4:Test_Unsupported[Test]
endif

#-------------------------------------------------------------------#

',
	1,
	'',
	"f176926f-014f-4bcd-9457-29b308a17b1c",
	2,
	2);
INSERT INTO O_TPARM
	VALUES ("16d49c3b-818c-4405-86ec-2bd3aee9d4d0",
	"8a8d324b-0511-4234-8fcc-e71d3ae93c45",
	'Iteration',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TPARM
	VALUES ("578c0f24-3298-48d9-bab6-bcfb52a71986",
	"8a8d324b-0511-4234-8fcc-e71d3ae93c45",
	'Test',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"16d49c3b-818c-4405-86ec-2bd3aee9d4d0",
	'');
INSERT INTO O_TFR
	VALUES ("dfbf37eb-19b4-4796-8277-11894cd6523f",
	"54095725-f60a-433c-b6ed-6dd76e5ec8fa",
	'Delete_Relationships',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	0,
	'#-------------------------------------------------------------------#
#
# Delete all relationships
#
# The architectre shall provide a mechanism to allow deletion of a 
# simple relationship link between two object instance
# 1241-0000-01-0604
#
# The architecture shall provide a mechanism to allow the deletion of 
# an associative link between an associative object and the link 
# between two objects
# 1241-0000-01-0612
#
# The architecture shall provide a mechanism to allow the deletion 
# of a link between two objects in a associative relationship
# 1241-0000-01-0613
#
# The architecture shall support a translation of the ASL unassociate
# statment to map to the mechanism that allows the deletion of an 
# associative link between an associative object and the link between
# two objects
# 1241-0000-01-1203
#
# The architecture shall support a translation of the ASL unlink
# statement to map to the mechanism that allow the deletion of a 
# link between two objects in a relationship
# 1241-0000-01-1204
#
# The architecture shall support a translation of the ASL navigate
# statment to map to the mechanism that allows the traversal of
# relationship links
# 1241-0000-01-1205
#
#-------------------------------------------------------------------#

# Set the variable defaults
Has_Failed   = FALSE
Failure_Code = 0

[] = RPT1:Start_Test[Test, "1241-0000-01-0613", "Relationships", "ObjE", "Delete relationships"]
[] = RPT8:Specify_Requid[Test,"1241-0000-01-0604"]
[] = RPT8:Specify_Requid[Test,"1241-0000-01-0612"]
[] = RPT8:Specify_Requid[Test,"1241-0000-01-1203"]
[] = RPT8:Specify_Requid[Test,"1241-0000-01-1204"]
[] = RPT8:Specify_Requid [Test, "1103-0000-01-0621"]
[] = RPT8:Specify_Requid [Test, "1103-0000-01-0622"]



CurrentID = 1

loop

   InstE = find-one Object_E where idE = CurrentID
   breakif InstE = UNDEFINED

   {setAssoc} = InstE -> R5.Object_EF
   
   for instAssoc in {setAssoc} do
      InstF = instAssoc -> R5.Object_F   
      unassociate InstE R5 InstF from instAssoc
      unlink InstE R5 InstF
      delete instAssoc
   endfor

   delete InstE

   CurrentID = CurrentID + 1

endloop


# Find the desired instances for Object_E
#firstE  = find-one Object_E where idE = 1
#thirdE  = find-one Object_E where idE = 3
#fifthE  = find-one Object_E where idE = 5

# Find the desired instances for Object_F
#firstF  = find-one Object_F where idF = 1
#fourthF = find-one Object_F where idF = 4

# Find the desired instances for Object_EF
#firstEF  = find-one Object_EF where idEF = 1
#secondEF = find-one Object_EF where idEF = 2
#thirdEF  = find-one Object_EF where idEF = 3
#fourthEF = find-one Object_EF where idEF = 4
#fifthEF  = find-one Object_EF where idEF = 5

# Delete relationships
#unassociate firstE R5 firstF  from fourthEF
#unassociate firstE R5 fourthF from thirdEF
#unassociate thirdE R5 fourthF from secondEF
#unassociate fifthE R5 fourthF from firstEF

#unlink firstE R5 firstF
#unlink firstE R5 fourthF
#unlink thirdE R5 fourthF
#unlink fifthE R5 fourthF

{SetE}  = find-all Object_E
{SetEF} = find-all Object_EF
{SetF}  = find-all Object_F

for InstE in {SetE} do
   delete InstE
endfor

for InstEF in {SetEF} do
   delete InstEF
endfor

for InstF in {SetF} do
   delete InstF
endfor

{SetE}  = find-all Object_E
{SetEF} = find-all Object_EF
{SetF}  = find-all Object_F

if countof {SetE} = 0 then

   if countof {SetEF} = 0 then

      if countof {SetF} != 0 then
         Has_Failed   = TRUE
         Failure_Code = -10
      endif

   else
      Has_Failed   = TRUE
      Failure_Code = -20
   endif

else
   Has_Failed   = TRUE
   Failure_Code = -30
endif


#-------------------------------------------------------------------#

if Has_Failed then
   [] = RPT3:Test_Failed["objE", Test, Failure_Code]
else
   [] = RPT2:Test_Passed["ObjE", Test, 0]
endif

#-------------------------------------------------------------------#',
	3,
	'',
	"8a8d324b-0511-4234-8fcc-e71d3ae93c45",
	2,
	3);
INSERT INTO O_TPARM
	VALUES ("7c6e58c3-03e0-4168-abc7-1d34a6e2b5ab",
	"dfbf37eb-19b4-4796-8277-11894cd6523f",
	'Test',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_NBATTR
	VALUES ("d00a1ecb-eb95-4482-9dc4-469e1b9f400a",
	"54095725-f60a-433c-b6ed-6dd76e5ec8fa");
INSERT INTO O_BATTR
	VALUES ("d00a1ecb-eb95-4482-9dc4-469e1b9f400a",
	"54095725-f60a-433c-b6ed-6dd76e5ec8fa");
INSERT INTO O_ATTR
	VALUES ("d00a1ecb-eb95-4482-9dc4-469e1b9f400a",
	"54095725-f60a-433c-b6ed-6dd76e5ec8fa",
	"00000000-0000-0000-0000-000000000000",
	'idE',
	' Preferred identifier.
',
	'',
	'idE',
	0,
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("95613dd2-7021-47d3-b7ac-f4abb1ae2dd8",
	"54095725-f60a-433c-b6ed-6dd76e5ec8fa");
INSERT INTO O_BATTR
	VALUES ("95613dd2-7021-47d3-b7ac-f4abb1ae2dd8",
	"54095725-f60a-433c-b6ed-6dd76e5ec8fa");
INSERT INTO O_ATTR
	VALUES ("95613dd2-7021-47d3-b7ac-f4abb1ae2dd8",
	"54095725-f60a-433c-b6ed-6dd76e5ec8fa",
	"d00a1ecb-eb95-4482-9dc4-469e1b9f400a",
	'ResultA',
	' This attribute is manipulated 
',
	'',
	'ResultA',
	0,
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("4f1d7df7-7b3e-4d90-826a-d71d03a205a9",
	"54095725-f60a-433c-b6ed-6dd76e5ec8fa");
INSERT INTO O_BATTR
	VALUES ("4f1d7df7-7b3e-4d90-826a-d71d03a205a9",
	"54095725-f60a-433c-b6ed-6dd76e5ec8fa");
INSERT INTO O_ATTR
	VALUES ("4f1d7df7-7b3e-4d90-826a-d71d03a205a9",
	"54095725-f60a-433c-b6ed-6dd76e5ec8fa",
	"95613dd2-7021-47d3-b7ac-f4abb1ae2dd8",
	'current_state',
	'',
	'',
	'current_state',
	0,
	"ba5eda7a-def5-0000-0000-000000000006",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"54095725-f60a-433c-b6ed-6dd76e5ec8fa");
INSERT INTO O_OIDA
	VALUES ("d00a1ecb-eb95-4482-9dc4-469e1b9f400a",
	"54095725-f60a-433c-b6ed-6dd76e5ec8fa",
	0,
	'idE');
INSERT INTO O_ID
	VALUES (1,
	"54095725-f60a-433c-b6ed-6dd76e5ec8fa");
INSERT INTO O_ID
	VALUES (2,
	"54095725-f60a-433c-b6ed-6dd76e5ec8fa");
INSERT INTO PE_PE
	VALUES ("54095725-f60a-433c-b6ed-6dd76e5ec8fa",
	1,
	"1a16545d-ab33-4153-84c6-9d8e9f7ca024",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO EP_PKG_PROXY
	VALUES ("1a16545d-ab33-4153-84c6-9d8e9f7ca024",
	"00000000-0000-0000-0000-000000000000",
	"6d141527-9fd5-4054-8692-9fc325055afc",
	'Relationships',
	'',
	0,
	'../Relationships.xtuml');
