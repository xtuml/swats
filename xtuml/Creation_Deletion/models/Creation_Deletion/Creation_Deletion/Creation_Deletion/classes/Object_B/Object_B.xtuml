-- BP 7.1.6 content: ModelClass syschar: 3 persistence-version: 7.1.6

INSERT INTO O_OBJ
	VALUES ("31e84d4b-761b-4bd6-b254-00082681bdbc",
	'Object_B',
	3,
	'objB',
	' Object_B is manipulated by object ''Instance Creation''.
',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_TFR
	VALUES ("d32cd06b-a924-4d33-b73b-e10ddb61c62e",
	"31e84d4b-761b-4bd6-b254-00082681bdbc",
	'do_sync_create_unique',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	0,
	'#------------------------------------------------------------------------#
# Create unique, without specifing preferred identifier
#------------------------------------------------------------------------#

   Test = Test_Number

#------------------------------------------------------------------------#
# Test 1
#------------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1103-0000-01-0511", "Creation Deletion", "objB", "Create unique no preferred id"]
   [] = RPT8:Specify_Requid[Test, "1103-0000-01-0311"]
   [] = RPT8:Specify_Requid[Test, "1241-0000-01-0101"]
   [] = RPT8:Specify_Requid[Test, "1241-0000-01-0102"]
   [] = RPT8:Specify_Requid[Test, "1101-0000-01-0118"]

   Has_Failed = FALSE

   Failure_Code = -1

   # create two initial instances
   count = 0
   
   loop
     count = count + 1
     new_B = create unique Object_B
     breakif count >= 2
   endloop

   # Create a set of instances to check for uniqueness of the new instance
   {beforeB} = find-all Object_B

   # Perform creation
   new_instanceB = create unique Object_B with IntegerA = Test 
 
   # this will be the third instance

   # Find the newly created instance
   an_instanceB = find-one Object_B where IntegerA = Test

   # Check that it was created and is unique
   if an_instanceB = UNDEFINED then
      Has_Failed   = TRUE
      Failure_Code = -10 
   else
      # Check that its was created with the correct data
      if an_instanceB.IntegerA != Test then
         Has_Failed   = TRUE
         Failure_Code = -20
      endif

      # Check that the identifier is unique
      for each_beforeB in {beforeB} do

         if each_beforeB.ReferenceB = new_instanceB.ReferenceB then
            Has_Failed   = TRUE
            Failure_Code = -30
         endif

      endfor

   endif

   if !Has_Failed then
      [] = RPT2:Test_Passed["objB", Test, 0]
   else
      [] = RPT3:Test_Failed["objB", Test, Failure_Code]
   endif

   Test = Test + 1

# End Test 1

#------------------------------------------------------------------------#
# Test 2 - Create unique, specifing the preferred identifier
#          THIS TEST SHOULD CAUSE A COMPILE TIME ERROR, SINCE THE 
#          PREFERRED IDENTIFIER HAS BEEN GIVEN IN THE ''CREATE UNIQUE''
#          STATEMENT
#------------------------------------------------------------------------#

   Failure_Code = -1
   Has_Failed   = FALSE

   [] = RPT1:Start_Test[Test, "1103-0000-01-0511", "Creation Deletion", "objB", "Create unique incorrectly specifying pref id"]
   [] = RPT8:Specify_Requid[Test, "1241-0000-01-0101"]
   [] = RPT8:Specify_Requid[Test, "1241-0000-01-0102"]
   [] = RPT8:Specify_Requid[Test, "1101-0000-01-0118"]

   #Create a set of instances to check for uniqueness of the new instance
   {beforeB} = find-all Object_B 

   # There should be 3 instances in this set check that this is the case.
   number_in_B = countof{beforeB}

   if number_in_B !=3 then
      Has_Failed   = TRUE
      Failure_Code = -10
   endif

   # There is a possibility that this will create an instance with a 
   # non-unique instance, so fix ReferenceB such that it shouldn''t
   # have the same identifier as any future test.

   # Obviously, we can''t guarantee this, but let''s have a damn good try.

   Reference_B = Test * Test

   # Perform creation
   new_instanceB = create unique Object_B with ReferenceB = Reference_B &\
                                               IntegerA   = Test

   # Find the newly created instance
   an_instanceB = find-one Object_B where IntegerA = Test

   # Check that it was created and is unique
   if an_instanceB = UNDEFINED then
        Has_Failed   = TRUE
        Failure_Code = -20
   else

      # Check that its was created with the correct data
      if an_instanceB.IntegerA != Test then
         Has_Failed   = TRUE
         Failure_Code = -30
      endif

      #Check that the identifier is unique
      for each_beforeB in {beforeB} do

         if each_beforeB.ReferenceB = new_instanceB.ReferenceB then
            Has_Failed   = TRUE
            Failure_Code = -40
         endif

      endfor

   endif

   if !Has_Failed then
      [] = RPT2:Test_Passed["objB", Test, 0]
   else
      [] = RPT3:Test_Failed["objB", Test, Failure_Code]
   endif

   Test = Test + 1

# End Test 2

#------------------------------------------------------------------------#
# Test 3 - Create two unique, check for unique id''s
#------------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1103-0000-01-0511", "Creation Deletion", "objB", "Create two unique no attributes"]
   [] = RPT8:Specify_Requid[Test, "1241-0000-01-0101"]
   [] = RPT8:Specify_Requid[Test, "1241-0000-01-0102"]
   [] = RPT8:Specify_Requid[Test, "1101-0000-01-0118"]

   Has_Failed   = FALSE
   Failure_Code = -1

   # Create a set of instances to check for uniqueness of the new instance
   {beforeB} = find-all Object_B

   # Perform creation
   new_instanceB         = create unique Object_B
   another_new_instanceB = create unique Object_B

   # Check that it was created and is unique
   if new_instanceB = UNDEFINED  then
      Has_Failed   = TRUE
      Failure_Code = -10
   else

      if another_new_instanceB = UNDEFINED then
         Has_Failed   = TRUE
         Failure_Code = -20
      else

         # Check that the identifier is unique

         # Note that this isn''t always a failure of the I-OOA or
         # WACA. A previous test had tried to specify the preferred
         # identifier during a create unique. This is against the rule
         # of SM OOA, but can be done. So if this fails here, have a look
         # at the preferred identifier being the same in the earlier test.

         for each_beforeB in {beforeB} do

            if each_beforeB.ReferenceB = new_instanceB.ReferenceB then
               Has_Failed   = TRUE
               Failure_Code = -30
            endif

            if each_beforeB.ReferenceB = another_new_instanceB.ReferenceB then
               Has_Failed   = TRUE
               Failure_Code = -40
            endif

         endfor

         # But of it fails here, it definately IS a problem.

         if another_new_instanceB.ReferenceB = new_instanceB.ReferenceB then
            Has_Failed   = TRUE
            Failure_Code = -50
         endif  

      endif

   endif

   if !Has_Failed then
      [] = RPT2:Test_Passed["objB", Test, 0]
   else
      [] = RPT3:Test_Failed["objB", Test, Failure_Code]
   endif

# End Test 3

#------------------------------------------------------------------------#

Returned_Test_Number = Test',
	3,
	'',
	"00000000-0000-0000-0000-000000000000",
	2,
	1);
INSERT INTO O_TPARM
	VALUES ("c6fa0d56-b6b1-40e7-a3e8-c092046d3085",
	"d32cd06b-a924-4d33-b73b-e10ddb61c62e",
	'Test_Number',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TPARM
	VALUES ("6865d67f-8cab-496b-8bbb-fbf82d9d655b",
	"d32cd06b-a924-4d33-b73b-e10ddb61c62e",
	'Returned_Test_Number',
	"ba5eda7a-def5-0000-0000-000000000002",
	1,
	'',
	"c6fa0d56-b6b1-40e7-a3e8-c092046d3085",
	'');
INSERT INTO O_NBATTR
	VALUES ("6b3aaea2-8b25-4c44-9574-34dd06496e99",
	"31e84d4b-761b-4bd6-b254-00082681bdbc");
INSERT INTO O_BATTR
	VALUES ("6b3aaea2-8b25-4c44-9574-34dd06496e99",
	"31e84d4b-761b-4bd6-b254-00082681bdbc");
INSERT INTO O_ATTR
	VALUES ("6b3aaea2-8b25-4c44-9574-34dd06496e99",
	"31e84d4b-761b-4bd6-b254-00082681bdbc",
	"00000000-0000-0000-0000-000000000000",
	'ReferenceB',
	' Preferred identifier.
',
	'',
	'ReferenceB',
	0,
	"ba5eda7a-def5-0000-0000-000000000005",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("62fdb4fc-ffac-4ccd-b270-b14df53a6f5a",
	"31e84d4b-761b-4bd6-b254-00082681bdbc");
INSERT INTO O_BATTR
	VALUES ("62fdb4fc-ffac-4ccd-b270-b14df53a6f5a",
	"31e84d4b-761b-4bd6-b254-00082681bdbc");
INSERT INTO O_ATTR
	VALUES ("62fdb4fc-ffac-4ccd-b270-b14df53a6f5a",
	"31e84d4b-761b-4bd6-b254-00082681bdbc",
	"6b3aaea2-8b25-4c44-9574-34dd06496e99",
	'IntegerA',
	' An integer.
',
	'',
	'IntegerA',
	0,
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"31e84d4b-761b-4bd6-b254-00082681bdbc");
INSERT INTO O_OIDA
	VALUES ("6b3aaea2-8b25-4c44-9574-34dd06496e99",
	"31e84d4b-761b-4bd6-b254-00082681bdbc",
	0,
	'ReferenceB');
INSERT INTO O_ID
	VALUES (1,
	"31e84d4b-761b-4bd6-b254-00082681bdbc");
INSERT INTO O_ID
	VALUES (2,
	"31e84d4b-761b-4bd6-b254-00082681bdbc");
INSERT INTO PE_PE
	VALUES ("31e84d4b-761b-4bd6-b254-00082681bdbc",
	1,
	"c852afc7-98ac-4492-988b-0303d2b80eff",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO EP_PKG_PROXY
	VALUES ("c852afc7-98ac-4492-988b-0303d2b80eff",
	"00000000-0000-0000-0000-000000000000",
	"10f28eec-2c10-4bed-b362-3203399c1025",
	'classes',
	'',
	0,
	'../classes.xtuml');
