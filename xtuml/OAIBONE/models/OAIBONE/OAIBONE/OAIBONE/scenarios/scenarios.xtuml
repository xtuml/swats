-- BP 7.1.6 content: Package syschar: 3 persistence-version: 7.1.6

INSERT INTO EP_PKG
	VALUES ("1a9fe1ba-07d2-4db4-8489-08ba625e886c",
	"00000000-0000-0000-0000-000000000000",
	"5310fe55-f993-480a-bdcd-7c6a94a4f6ac",
	'scenarios',
	'',
	0);
INSERT INTO GD_MD
	VALUES ("35049bc4-807d-4576-be2d-bbcf0f998521",
	112,
	"1a9fe1ba-07d2-4db4-8489-08ba625e886c",
	108,
	0,
	0,
	1,
	1,
	1,
	12,
	1,
	0,
	0,
	0,
	0,
	0,
	'',
	'OAIBONE::OAIBONE::OAIBONE::scenarios');
INSERT INTO DIM_DIA
	VALUES ("35049bc4-807d-4576-be2d-bbcf0f998521",
	'',
	1.000000,
	0.000000,
	0.000000,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO S_SYNC
	VALUES ("dd007253-6ed7-4f59-b969-f2b1bf7659cf",
	"00000000-0000-0000-0000-000000000000",
	'First_Set_of_Tests',
	' First Set of Tests
',
	'my_test = find-one Test_Data

# Define a local data structure to be passed via a bridge
# into a destination domain.

{Source_Structure_One}   is Source_Structure_Type
{Source_Structure_Two}   is Source_Structure_Type
{Source_Structure_Three} is Source_Structure_Type

{Returned_Structure_1}   is Source_Structure_Type
{Returned_Structure_2}   is Source_Structure_Type
{Returned_Structure_3}   is Source_Structure_Type

Test = my_test.This_Test_Number

#--------------------------------------------------------------------------
# Test 1
#--------------------------------------------------------------------------

   [] = RPT1:Start_Test[Test,"Null Requid", "OAIBONE", "Scenario", "Send 1 structure to bridge"]

   Object_One = create Source_Bridge_Data with Reference   = Test    &\
                                               The_Integer = 1       &\
                                               The_Real    = 2.0     &\
                                               The_String  = "three" &\ 
                                               The_Colour  = ''Red''   &\
                                               The_Boolean = FALSE

   append [Object_One.The_Integer, \
           Object_One.The_Real,    \
           Object_One.The_String,  \
           Object_One.The_Boolean, \
           Object_One.The_Colour]   to {Source_Structure_One}

   Elements_In_Structure = 1

   # Pass this lot into the bridge.
   Result = FALSE

   [Result, {Returned_Structure_1} ] = IITGWO1:Across_The_Great_Divide[Test,                   \
                                                                      {Source_Structure_One}, \
                                                                      Object_One.The_Integer, \
                                                                      Object_One.The_Real,    \
                                                                      Object_One.The_String,  \
                                                                      Object_One.The_Colour,  \
                                                                      Object_One.The_Boolean, \
                                                                      Elements_In_Structure]

   if Result = TRUE then
      [] = RPT2:Test_Passed["OAIBONE Source 1 Structure sent", Test, 0]
   else
      [] = RPT3:Test_Failed["OAIBONE Source 1 Structure sent", Test, -1]
   endif

   Test = Test + 1

# End Test 1

#--------------------------------------------------------------------------
# Test 2
#--------------------------------------------------------------------------

   [] = RPT1:Start_Test[Test,"Null Requid", "OAIBONE", "Scenario", "Send 2 structures to bridge"]

   Object_Two = create Source_Bridge_Data with Reference   = Test   &\
                                               The_Integer = 4      &\
                                               The_Real    = 5.0    &\
                                               The_String  = "six"  &\
                                               The_Colour  = ''Blue'' &\
                                               The_Boolean = TRUE

   append [Object_One.The_Integer, \
           Object_One.The_Real,    \
           Object_One.The_String,  \
           Object_One.The_Boolean, \
           Object_One.The_Colour    ]   to {Source_Structure_Two}


   append [Object_Two.The_Integer, \
           Object_Two.The_Real,    \
           Object_Two.The_String,  \
           Object_Two.The_Boolean, \
           Object_Two.The_Colour   ]   to {Source_Structure_Two}


   Elements_In_Structure = 2

   # Pass this lot into the bridge.
   Result = FALSE

   [Result, {Returned_Structure_2} ] = IITGWO1:Across_The_Great_Divide[Test,                   \
                                                                      {Source_Structure_Two}, \
                                                                      Object_Two.The_Integer, \
                                                                      Object_Two.The_Real,    \
                                                                      Object_Two.The_String,  \
                                                                      Object_Two.The_Colour,  \
                                                                      Object_Two.The_Boolean, \
                                                                      Elements_In_Structure]

   if Result = TRUE then
      [] = RPT2:Test_Passed["OAIBONE Source 2 Structures sent", Test, 0]
   else
      [] = RPT3:Test_Failed["OAIBONE Source 2 Structures sent", Test, -1]
   endif

   Test = Test + 1

# End Test 2

#--------------------------------------------------------------------------
# Test 3
#--------------------------------------------------------------------------

   [] = RPT1:Start_Test[Test,"Null Requid", "OAIBONE", "Scenario", "Send 3 structures to bridge"]

   Object_Three = create Source_Bridge_Data with Reference   = Test   &\
                                                 The_Integer = 7      &\
                                                 The_Real    = 8.0    &\
                                                 The_String  = "nine" &\
                                                 The_Colour  = ''Blue'' &\
                                                 The_Boolean = TRUE

   append [Object_One.The_Integer, \
           Object_One.The_Real,    \
           Object_One.The_String,  \
           Object_One.The_Boolean, \
           Object_One.The_Colour  ]   to {Source_Structure_Three}

   append [Object_Two.The_Integer, \
           Object_Two.The_Real,    \
           Object_Two.The_String,  \
           Object_Two.The_Boolean, \
           Object_Two.The_Colour   ]   to {Source_Structure_Three}

   append [Object_Three.The_Integer, \
           Object_Three.The_Real,    \
           Object_Three.The_String,  \
           Object_Three.The_Boolean, \
           Object_Three.The_Colour  ]   to {Source_Structure_Three}

   Elements_In_Structure = 3

   # Pass this lot into the bridge.
   Result = FALSE

   [Result, {Returned_Structure_3} ] = IITGWO1:Across_The_Great_Divide[Test,                     \
                                                                      {Source_Structure_Three}, \
                                                                      Object_Three.The_Integer, \
                                                                      Object_Three.The_Real,    \
                                                                      Object_Three.The_String,  \ 
                                                                      Object_Three.The_Colour,  \
                                                                      Object_Three.The_Boolean, \
                                                                      Elements_In_Structure]

   if Result = TRUE then
      [] = RPT2:Test_Passed["OAIBONE Source 3 Structures sent", Test, 0]
   else
      [] = RPT3:Test_Failed["OAIBONE Source 3 Structures sent", Test, -1]
   endif

   Test = Test + 1

# End Test 3

#--------------------------------------------------------------------------
# Test 4
#--------------------------------------------------------------------------

   # [] = RPT1:Start_Test[Test,"Null Requid", "OAIBONE", "Scenario", "Struct IH to bridge"]

   # {Decomposed_Struct} is VSD_Struct

   # ValA = 0
   # ValB = 0
   # ValC = 0
   # ValD = 0

   # Simple_ObjA = create Very_Simple_Data_Object with Object_Reference_VSD  = 1 &\
                                                     # Object_Simple_Integer = 1 &\
                                                     # Object_Simple_Real    = 1.0

   # Simple_ObjB = create Very_Simple_Data_Object with Object_Reference_VSD  = 2 &\
                                                     # Object_Simple_Integer = 2 &\
                                                     # Object_Simple_Real    = 2.0

   # Simple_ObjC = create Very_Simple_Data_Object with Object_Reference_VSD  = 3 &\
                                                     # Object_Simple_Integer = 3 &\
                                                     # Object_Simple_Real    = 3.0

   # [{Decomposed_Struct}] = IITGWO4:The_IH_Struct_Across_Bridge[Simple_ObjA.Object_Reference_VSD, Simple_ObjB.Object_Reference_VSD, Simple_ObjC.Object_Reference_VSD]

   # for [A_Ref, A_Int, A_Real] in {Decomposed_Struct} do

      # if A_Ref = 1 then
  
         # if A_Int = 1 then

            # if A_Real = 1.0 then
               # ValA = 10
            # else
               # ValA = -10
            # endif

         # else
            # ValA = -11
         # endif

      # else

         # if A_Ref = 2 then
     
            # if A_Int = 2 then

               # if A_Real = 2.0 then
                  # ValB = 20
               # else
                  # ValB = -20
               # endif

            # else
               # ValB = -21
            # endif

         # else

            # if A_Ref = 3 then

               # if A_Int = 3 then

                  # if A_Real = 3.0 then
                     # ValC = 30
                  # else
                     # ValC = -3
                  # endif

               # else
                  # ValC = -31
               # endif

            # else
               # ValD = -40
            # endif

         # endif

      # endif

   # endfor


   # if ValA = 10 and ValB = 20 and ValC = 30 and ValD = 0 then
      # [] = RPT2:Test_Passed["OAIBONE Struct IH to bridge", Test, 0]
   # else
      # [] = RPT3:Test_Failed["OAIBONE Struct IH to bridge", Test, -10]
   # endif

   # Test = Test + 1

# End Test 4

#--------------------------------------------------------------------------

my_test.This_Test_Number = Test',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	2,
	2);
INSERT INTO PE_PE
	VALUES ("dd007253-6ed7-4f59-b969-f2b1bf7659cf",
	1,
	"1a9fe1ba-07d2-4db4-8489-08ba625e886c",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("9f05f478-3b26-449c-a45e-876ada31aa0f",
	"00000000-0000-0000-0000-000000000000",
	'Initial_Call_to_Domain_Two',
	' Initial Call to Domain Two
',
	'my_test = find-one Test_Data

Test = my_test.This_Test_Number

#--------------------------------------------------------------------------
# Test 1 - Define a local data structure to be passed via a bridge into a 
#          destination domain
#--------------------------------------------------------------------------

   [] = RPT1:Start_Test[Test,"Null Requid", "OAIBONE", "Scenario3", "Send 1 v simple structure to SBTWO"]

   {Source_Structure_One}   is Very_Simple_Structure_Type

   My_Simple_Integer = 10
   My_Simple_Real    = 20.0

   count = 1

   loop

      My_Simple_Integer = My_Simple_Integer * count

      append [My_Simple_Integer, My_Simple_Real] to {Source_Structure_One}

      breakif count = 5

      count = count + 1

   endloop

   # Pass this lot into the bridge.
   [] = RPT2:Test_Passed["OAIBONE Send a simple structure", Test, My_Simple_Integer]

   [] = IITGWO2:Wide_Blue_Yonder [Test, {Source_Structure_One}]

   Test = Test + 1

# End Test 1

#--------------------------------------------------------------------------

my_test.This_Test_Number = Test',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'',
	2,
	3);
INSERT INTO PE_PE
	VALUES ("9f05f478-3b26-449c-a45e-876ada31aa0f",
	1,
	"1a9fe1ba-07d2-4db4-8489-08ba625e886c",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("4a1cf411-6275-4830-9c90-6e8b9b1a981f",
	"00000000-0000-0000-0000-000000000000",
	'Start_OAIBONE_Tests',
	' Start_OAIBONE_Tests
',
	'my_test = create unique Test_Data with This_Test_Number = 1

[] = OAIBONE2::Create_Report_Data[]
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'',
	2,
	4);
INSERT INTO PE_PE
	VALUES ("4a1cf411-6275-4830-9c90-6e8b9b1a981f",
	1,
	"1a9fe1ba-07d2-4db4-8489-08ba625e886c",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("81766de9-0f4f-4d46-b6bb-e3dfeb2d1b1d",
	"00000000-0000-0000-0000-000000000000",
	'Finish_OAIBONE_Tests',
	' Finish_OAIBONE_Tests
',
	'[] = OAIBONE3::Delete_Report_Data[]

my_test = find-one Test_Data

delete my_test',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'',
	2,
	5);
INSERT INTO PE_PE
	VALUES ("81766de9-0f4f-4d46-b6bb-e3dfeb2d1b1d",
	1,
	"1a9fe1ba-07d2-4db4-8489-08ba625e886c",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("921c9650-c460-4b9a-ba32-b3e27564bed7",
	"00000000-0000-0000-0000-000000000000",
	'Send_To_Bridge',
	' Send_To_Bridge
',
	'my_test = find-one Test_Data

Test = my_test.This_Test_Number

#--------------------------------------------------------------------------
# Test 1 - 
#--------------------------------------------------------------------------

   [] = RPT1:Start_Test[Test,"Null Requid", "OAIBONE", "Scenario", "Send structure to SBTWO"]

   {The_Source_Structure}   is Structure_Of_UDTs

   Source_Value = 2

   append [Source_Value] to {The_Source_Structure}

   [] = IITGWO3:Test_Structure_In_Bridge [Test, {The_Source_Structure}]

   Test = Test + 1

# End Test 1

my_test.This_Test_Number = Test',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'',
	2,
	1);
INSERT INTO PE_PE
	VALUES ("921c9650-c460-4b9a-ba32-b3e27564bed7",
	1,
	"1a9fe1ba-07d2-4db4-8489-08ba625e886c",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("792e9659-b6b4-4181-b7ca-7fa0e06cd3d6",
	"00000000-0000-0000-0000-000000000000",
	'GetTime_Statements',
	'',
	'# GetTime Statements do not appear anywhere in SWATS
# This Scenario doesn''t do anything but just adds these statements

# Uncommented for DOS target examples:
time_real_local = 0.0
#$ASL_TIME time_real_local := GETTIME.get_time;

time_int_local = 0
#$ASL_TIME time_int_local := GETTIME.get_time;

time_real_local = 0.0
#$ASL_TIME time_real_local := GETTIME.get_time_seconds;

time_int_local = 0
#$ASL_TIME time_int_local := GETTIME.get_time_seconds;
# Commented for other target examples:
#time_int_local = 0
##$ASL_TIME time_int_local := GETTIME.get_tickcount;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'',
	2,
	6);
INSERT INTO PE_PE
	VALUES ("792e9659-b6b4-4181-b7ca-7fa0e06cd3d6",
	1,
	"1a9fe1ba-07d2-4db4-8489-08ba625e886c",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO PE_PE
	VALUES ("1a9fe1ba-07d2-4db4-8489-08ba625e886c",
	1,
	"00000000-0000-0000-0000-000000000000",
	"d35c0e50-4f6f-4307-bf25-7abd7e8d96ff",
	7);
INSERT INTO C_C_PROXY
	VALUES ("d35c0e50-4f6f-4307-bf25-7abd7e8d96ff",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	'OAIBONE',
	'',
	0,
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Open Architecture Internal Bridge Domain One',
	'../OAIBONE.xtuml');
INSERT INTO S_SYS_PROXY
	VALUES ("5310fe55-f993-480a-bdcd-7c6a94a4f6ac",
	'OAIBONE',
	1,
	'../../../OAIBONE.xtuml');
